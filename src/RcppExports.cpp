// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calc_beta_cpp
double calc_beta_cpp(Rcpp::NumericMatrix in_table, double upper_lim);
RcppExport SEXP _treestats_calc_beta_cpp(SEXP in_tableSEXP, SEXP upper_limSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type in_table(in_tableSEXP);
    Rcpp::traits::input_parameter< double >::type upper_lim(upper_limSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_beta_cpp(in_table, upper_lim));
    return rcpp_result_gen;
END_RCPP
}
// calc_sackin_cpp
int calc_sackin_cpp(Rcpp::NumericMatrix in_table);
RcppExport SEXP _treestats_calc_sackin_cpp(SEXP in_tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type in_table(in_tableSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_sackin_cpp(in_table));
    return rcpp_result_gen;
END_RCPP
}
// calc_nltt_cpp
float calc_nltt_cpp(const Rcpp::NumericVector& brts_one, const Rcpp::NumericVector& brts_two);
RcppExport SEXP _treestats_calc_nltt_cpp(SEXP brts_oneSEXP, SEXP brts_twoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type brts_one(brts_oneSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type brts_two(brts_twoSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_nltt_cpp(brts_one, brts_two));
    return rcpp_result_gen;
END_RCPP
}
// calc_gamma_cpp
float calc_gamma_cpp(const Rcpp::NumericVector& brts_in);
RcppExport SEXP _treestats_calc_gamma_cpp(SEXP brts_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type brts_in(brts_inSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_gamma_cpp(brts_in));
    return rcpp_result_gen;
END_RCPP
}
// calc_phylodiv_cpp
float calc_phylodiv_cpp(const Rcpp::List& phy, float t);
RcppExport SEXP _treestats_calc_phylodiv_cpp(SEXP phySEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type phy(phySEXP);
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_phylodiv_cpp(phy, t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_treestats_calc_beta_cpp", (DL_FUNC) &_treestats_calc_beta_cpp, 2},
    {"_treestats_calc_sackin_cpp", (DL_FUNC) &_treestats_calc_sackin_cpp, 1},
    {"_treestats_calc_nltt_cpp", (DL_FUNC) &_treestats_calc_nltt_cpp, 2},
    {"_treestats_calc_gamma_cpp", (DL_FUNC) &_treestats_calc_gamma_cpp, 1},
    {"_treestats_calc_phylodiv_cpp", (DL_FUNC) &_treestats_calc_phylodiv_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_treestats(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
